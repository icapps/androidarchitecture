plugins {
    id "com.jfrog.bintray" version "1.7.3"
}
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

def artifactVersion = '0.1.11'
def artifactGroup = 'com.icapps.android'
def artifactName = 'architecture'

android {
    compileSdkVersion config.buildConfig.compileSdkVersion
    defaultConfig {
        minSdkVersion config.buildConfig.minSdkVersion
        targetSdkVersion config.buildConfig.targetSdkVersion
        versionCode config.buildConfig.versionCode
        versionName config.buildConfig.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps.kotlin.kotlinStdLib

    provided deps.niddler.niddler
    provided deps.leakCanary.leakCanary
    provided deps.libs.okhttp
    provided deps.libs.retrofit
    provided deps.libs.databinding
    provided deps.libs.dagger
    provided 'com.android.support:appcompat-v7:27.1.1'

    implementation deps.libs.archExtensions
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from android.sourceSets.main.java.srcDirs
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    inputs.dir 'src/main/java'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

afterEvaluate {
    sourceJar.dependsOn assembleRelease
}

bintray {
    user = System.getenv('BINTRAY_USER_ICAPPS')
    key = System.getenv('BINTRAY_KEY_ICAPPS')
    pkg {
        repo = 'maven'
        name = 'icapps-android-architecture'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/icapps/androidarchitecture'

        version {
            name = "$artifactVersion"
            desc = "icapps Architecture components for android"
            released = new Date()
        }
    }
    publications = ['maven']
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Nicola Verbeeck"
            email "nicola.verbeeck@icapps.com"
            organization "icapps"
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "$artifactGroup"
            artifactId "$artifactName"
            version "$artifactVersion"

            artifact("$buildDir/outputs/aar/lib-release.aar")
            artifact sourceJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Architecture components for android projects by icapps')
                root.appendNode('name', 'icapps-android-architecture')
                root.appendNode('url', 'https://github.com/icapps/androidarchitecture')
                root.children().last() + pomConfig

                def dependenciesNode = root.appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    if (it instanceof ExternalModuleDependency) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}